#include<stdio.h>  
#include<unistd.h>  
#include<signal.h>  
  
  
void sig_fun()  
{  
}  
  
void mysleep(int time)  
{  
    sigset_t newmask, oldmask;  
    struct sigaction new, old;  
     
    new.sa_handler = sig_fun;  //自定义抵达方法  
    new.sa_flags = 0;  
    sigemptyset(&new.sa_mask);  
    sigaction(SIGALRM,&new,&old);   
     
    sigemptyset(&newmask);  
    sigaddset(&newmask,SIGALRM); //将SIGALRM添加到newmask信号集  
  
  
    /*将newmask中的SIGALRM阻塞掉，并保存当前信号屏蔽字到Oldmask*/  
    sigprocmask(SIG_BLOCK,&newmask,&oldmask);  
      
    alarm(time);  
    sigsuspend(&oldmask);//将SIGALRM解除屏蔽然后挂起等待，信号SIGALRM递达后恢复原来的屏蔽字，也就是继续屏蔽  
     
    int sig = alarm(0);  
    sigaction(SIGALRM,&old,NULL);  
    sigprocmask(SIG_SETMASK,&oldmask,NULL);//恢复被屏蔽的信号SIGALRM  
}  
  
  
int main()  
{  
    int sig = 0;  
    while(1)  
    {  
       mysleep(3);  
        printf("my sleep runing\n");  
    }  
    return 0;  
}    